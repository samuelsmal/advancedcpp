#include <exception>
#include <stdexcept>
#include <iostream>

template <typename PlayerOneType,   // PlayerOneType models the first player.
          typename PlayerTwoType>
int connectFour<PlayerOneType, PlayerTwoType>::checkPlayfieldBlock(int x, int y, int delta_x, int delta_y) {
  int ret_val {0}, player{1};

  while(!ret_val && player < 3) {
    for(int steps = 0; steps < 4; ++steps, x += delta_x, y += delta_y) {
      if (pf.stoneat(x, y) != player) {
        ret_val = 0;
        break;
      } else {
        ret_val = player;
      }
    }

    ++player;
  }

  return ret_val;
}

template <typename PlayerOneType,   // PlayerOneType models the first player.
          typename PlayerTwoType>
int connectFour<PlayerOneType, PlayerTwoType>::checkPlayfield() {
  int block_value;

  // Checks from top to down.

  for (int x = 0; x < playfield::width; ++x) {
    for (int y = 0; y < playfield::height; ++y) {
      // Horizontal
      if (x < 4) {
        block_value = checkPlayfieldBlock(x, y, 1, 0);
        if (block_value) return block_value;
      }
      // Vertical
      if (y < 3) {
        block_value = checkPlayfieldBlock(x, y, 0, 1);
        if (block_value) return block_value;
      }

      // Diagonal, in both directions.
      if (y < 4) {
        if (x < 4) {
          block_value = checkPlayfieldBlock(x, y, 1, 1);
          if (block_value) return block_value;
        }
        
        if (x > 2) {
          block_value = checkPlayfieldBlock(x, y, -1, 1);
          if (block_value) return block_value;
        }

      }
    }
  }

  return 0;
}

template <typename PlayerOneType,   // PlayerOneType models the first player.
          typename PlayerTwoType>
bool connectFour<PlayerOneType, PlayerTwoType>::tryMove(int column, color_t player_colour) {
  bool return_value{true};

  try {
    if (pf.stoneat(column, 0) != 0)
      throw std::logic_error("Already full");
    
    if(player_colour != 1 && player_colour != 2)
      throw std::logic_error("No such player possible!");

    int tmp_row{playfield::height - 1};

    while (pf.stoneat(column, tmp_row) != 0) {
      --tmp_row;
    }

    pf.insertStone(column, tmp_row, player_colour);

  } catch (const std::exception &e) {
    std::cout << "Error: " << e.what() << std::endl;
    return_value = false;
  }

  return return_value;
}

template <typename PlayerOneType,   // PlayerOneType models the first player.
          typename PlayerTwoType>
void connectFour<PlayerOneType, PlayerTwoType>::startGame() {
  int current_player{1};

  pf.print();
  int playerWon{0};

  while(!playerWon) {
    if (current_player == 1) {
      if (tryMove(playerOne.play(pf), current_player)) {
        current_player = 2; // For the next round.
      } else {
        std::cerr << "Couldn't place stone!" << std::endl;
      }

    } else {
      if (tryMove(playerTwo.play(pf), current_player)) {
        current_player = 1; // For the next round.
      } else {
        std::cerr << "Couldn't place stone!" << std::endl;
      }
    }

    playerWon = checkPlayfield();
    pf.print();
  }

  std::cout << "Player " << playerWon << " has won the game!" << std::endl;
}
